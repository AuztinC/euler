(ns euler.level1.problem012)

;The sequence of triangle numbers is generated by adding the natural numbers. So the
;7 th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
;The first ten terms would be: 1,3,6,10,15,21,28,36,45,55
;Let us list the factors of the first seven triangle numbers:
;1 - 1
;3 - 1, 3
;6 - 1, 2, 3, 6
;28 - 1, 2, 4, 7, 14, 28
;We can see that 28 is the first triangle number to have over five divisors.
;What is the value of the first triangle number to have over five hundred divisors?
;
;function to calculate triangle number.
;function to check # of divisors [ done ]
;loop with counter, using counter as range to add together and achieve
;next triangle number
(defn- prx [x]
  (prn "x: " x)
  x)
;(defn prime-factors [n]
;  (loop [n n, d 2, factors {}]
;    (cond
;      (> (* d d) n) (if (> n 1) (update factors n (fnil inc 0)) factors)
;      (zero? (mod n d)) (recur (/ n d) d (update factors d (fnil inc 0)))
;      :else (recur n (inc d) factors))))
;
;(defn count-divisors [n]
;  (->> (prime-factors n)
;    (vals)
;    (map inc)
;    (reduce *)))

(defn count-divisors [n]
  (count (filter #(zero? (mod n %)) (map inc (range n)))))

(def triangles (map #(reduce + (range %)) (iterate inc 1)))

(defn num-of-divisors [n]
  (loop [idx 0]
    (if (<= n (count-divisors (nth triangles idx)))
      (nth triangles idx)
      (recur (inc idx)))))
